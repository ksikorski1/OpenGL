// ----------------------------------------------------------------
// Klasa abstrakcyjna obiektu kolizyjnego
// ----------------------------------------------------------------
class CCollider
{

public:


	// zwraca true jesli koliduje z _other
	virtual bool isCollision(CCollider *_other) = 0;

};



// ----------------------------------------------------------------
// Klasy dziedziczace po Collider, ktore realizuja 
// konkretna implementacje obiektu kolizyjnego
// ----------------------------------------------------------------
class CSphereCollider : public CCollider
{

public:


	// polozenie obiektu
	glm::vec3 *Position;

	// Promien sfery
	float Radius;


	CSphereCollider(glm::vec3 *_pos, float _r)
		: Position(_pos),  Radius(_r)
	{ }

	virtual bool isCollision(CCollider *_other)
	{
		// sprawdzanie czy drugi kolider jest tego samego typu
		//if (dynamic_cast<CSphereCollider*> (_other) == NULL)
		//	printf("Wrong type!\n");

		CSphereCollider *other = dynamic_cast<CSphereCollider*>(_other);

		float distance = glm::distance(*this->Position, *other->Position);
		printf("czy??? %f \n", distance);
        if (distance < this->Radius + other->Radius)
        {
            return true;
        }
        return false;
	}

};

// ----------------------------------------------------------------
// Axis Aligend Bounding Box
// Wersja uproszczona (Cube)
// ----------------------------------------------------------------
class CAABBCollider : public CCollider
{

public:

	// wskaznik do polozenia obiektu
	glm::vec3 *Position;
	
	// Dlugosc kazdego boku boxa
	float Length;

	CAABBCollider (glm::vec3 *_pos, float _length)
		: Position(_pos), Length(_length)
	{ }


	// ----------------------------------------------
	virtual bool isCollision(CCollider *_other)
	{
		CAABBCollider  *other = dynamic_cast<CAABBCollider *>(_other);

		glm::vec3 minA = get_min();
		glm::vec3 maxA = get_max();

		glm::vec3 minB = other->get_min();
		glm::vec3 maxB = other->get_max();

		return 	(minA.x <= maxB.x && maxA.x >= minB.x) &&
        		(minA.y <= maxB.y && maxA.y >= minB.y) &&
        		(minA.z <= maxB.z && maxA.z >= minB.z) ;
	}

	// ----------------------------------------------
	inline glm::vec3 get_min() { return *Position - glm::vec3(Length); }
	inline glm::vec3 get_max() { return *Position + glm::vec3(Length); }

	// ----------------------------------------------
	bool isPointInsideAABB(glm::vec3 _point)
	{
		glm::vec3 min = get_min();
		glm::vec3 max = get_max();

  		return 	(_point.x >= min.x && _point.x <= max.x) &&
    	     	(_point.y >= min.y && _point.y <= max.y) &&
         		(_point.z >= min.z && _point.z <= max.z) ;
	}


};


// ----------------------------------------------------------------
class CSceneObject
{

public:

	// pozycja obiektu na scenie
    glm::vec3 Position;
    glm::mat4x4 matModel;

	// potok openGL
    GLuint VAO;
    int VBO_Size;

	// NOWE: srednica sfery otaczajacej obiekt
	CCollider *Collider;


    CSceneObject()
    {
    }


    // ustawienie potoku
    void Init(GLuint _vao, int _size, glm::vec3 _pos)
    {
        VAO = _vao;
        VBO_Size = _size;
        Position = _pos;
		this->Update();


        //Collider = new CSphereCollider(&Position, 1.0f);
        Collider = new CAABBCollider(&Position, 1.0f);
    }

	void Update()
	{
		matModel = glm::translate(glm::mat4(1.0), Position);
	}

    // rysowanie na scenie
    void Draw()
    {
		GLint current_program;
		glGetIntegerv(GL_CURRENT_PROGRAM, &current_program);

        glUseProgram(current_program);
        glUniformMatrix4fv( glGetUniformLocation( current_program, "matModel" ), 1, GL_FALSE, glm::value_ptr(matModel) );

        glBindVertexArray( VAO );
        glDrawArrays( GL_TRIANGLES, 0, VBO_Size );
        glBindVertexArray( 0 );

    }

    // ustawienie pozycji na scenie
    void SetPosition(float x, float y, float z)
    {
        Position = glm::vec3(x, y, z);
        this->Update();
    }

    // zmiana pozycji na scenie
    void MoveXZ(float _x, float _z)
    {
        Position += glm::vec3(_x, 0.0, _z);
        this->Update();
    }

 	void MoveXZ(float _x, float _z, const CSceneObject &_other)
    {
        glm::vec3 OldPosition = this->Position;
        this->Position += glm::vec3(_x, 0.0, _z);

        if (isCollision(_other))
		{
			Position = OldPosition;
		}

        Update();

    }


	// NOWE: sprawdzanie kolizji z innym obiektem
    bool isCollision(const CSceneObject &_other)
    {
		return Collider->isCollision(_other.Collider);
    }


};
